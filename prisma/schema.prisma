generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Блог-модели
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  bio           String?   @db.Text

  accounts       Account[]
  sessions       Session[]
  posts          Post[]
  comments       Comment[]
  followers      Subscription[]  @relation("Followers")
  following      Subscription[]  @relation("Following")
  accessRequests AccessRequest[]
}

enum Visibility {
  PUBLIC
  PRIVATE
  REQUEST_ONLY
}

model Post {
  id         String     @id @default(cuid())
  title      String
  content    String     @db.Text
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  visibility Visibility @default(PUBLIC)

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  comments       Comment[]
  tags           PostTag[]
  accessRequests AccessRequest[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Tag {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  posts       PostTag[]
}

model PostTag {
  id     String @id @default(cuid())
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  tagId  String
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
}

model Subscription {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  followerId String
  follower   User   @relation("Followers", fields: [followerId], references: [id], onDelete: Cascade)

  followingId String
  following   User   @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model AccessRequest {
  id        String        @id @default(cuid())
  status    RequestStatus @default(PENDING)
  createdAt DateTime      @default(now())

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}
